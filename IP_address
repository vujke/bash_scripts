#!/bin/bash

#: Title		: Send new public IP address to email.
#: Date			: August 2023
#: Author		: github.com/vujke
#: Version		: 1.0
#: Description		: Checking if public IP address has changed. If yes, an email will be sent.

# Other commands to check IP address from bash/command line:
# curl ipinfo.io/ip
# curl api.ipify.org
# curl checkip.amazonaws.com
# dig @resolver4.opendns.com myip.opendns.com +short
# wget -qO - myip.dnsomatic.com

# Checking public IP address usig dig command.
NEW_IP_ADDR=$(dig @resolver4.opendns.com myip.opendns.com +short)
# Define output file where IP address will be stored.
IP_OUTPUT='ip_output.txt'
# If file defined in variable $IP_OUTPUT doesn't exist, file will be created. Otherwise, nothing will be done.
[ -n $IP_OUTPUT ] && touch $IP_OUTPUT
# Checking old IP address stored in variable $IP_OUTPUT (ip_output.txt).
OLD_IP_ADDR=$(head -n 1 $IP_OUTPUT)
TIME=$(date)
EMAIL="your_email@gmail.com"

# Checking if new IP address is different than old IP address that is stored in variable $IP_OUTPUT (ip_output.txt).
if [[ $NEW_IP_ADDR != $OLD_IP_ADDR ]]
then
# If it's different, an email will be sent.
	echo -e "New IP Address created on ${TIME} is:
	\n${NEW_IP_ADDR}
	\n********
	\nOld IP address was:
	\n${OLD_IP_ADDR}" | mailx -s "IP Address Has Changed" $EMAIL
 	# If IP address has changed (different than old one), new IP address will be stored (overridden) in variable $IP_OUTPUT which is file ip_output.txt.
	echo "${NEW_IP_ADDR}" &> $IP_OUTPUT
# If it's not different, nothing will be done.
else :
fi
